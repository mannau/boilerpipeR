<?xml encoding='US-ASCII'?>
<!-- $Id: design-impl.ent 317483 2001-08-23 00:35:39Z lehors $ -->
<category name='Implementation: Core Components' package='&package;.impl'>

 <class id='error-reporter' name='XMLErrorReporter'>
 
  <implements>
   <reference idref='configurable'/>
  </implements>
  
  <constant name='SEVERITY_WARNING'>
   <primitive type='short'/>
  </constant>
  
  <constant name='SEVERITY_ERROR'>
   <primitive type='short'/>
  </constant>
  
  <constant name='SEVERITY_FATAL_ERROR'>
   <primitive type='short'/>
  </constant>
  
  <field name='fLocale'>
   <reference idref='java-locale'/>
  </field>
  
  <field name='fMessageFormatters'>
   <collection>
    <collector>
     <reference idref='java-hashtable'/>
    </collector>
    <items>
     <reference idref='message-formatter'/>
    </items>
   </collection>
  </field>
  
  <field name='fErrorHandler'>
   <reference idref='sax-error-handler'/>
  </field>
  
  <field name='fContinueAfterFatalError'>
   <note>This field is initialized on reset.</note>
   <primitive type='boolean'/>
  </field>
  
  <constructor/>
  
  <method name='setLocale'>
   <param name='locale'>
    <reference idref='java-locale'/>
   </param>
  </method>
  
  <method name='putMessageFormatter'>
   <param name='domain'>
    <reference idref='java-string'/>
   </param>
   <param name='messageFormatter'>
    <reference idref='message-formatter'/>
   </param>
  </method>
  
  <method name='getMessageFormatter'>
   <param name='domain'>
    <reference idref='java-string'/>
   </param>
   <returns>
    <reference idref='message-formatter'/>
   </returns>
  </method>
  
  <method name='removeMessageFormatter'>
   <param name='domain'>
    <reference idref='java-string'/>
   </param>
   <returns>
    <reference idref='message-formatter'/>
   </returns>
  </method>
  
  <method name='reportError'>
   <param name='domain'>
    <reference idref='java-string'/>
   </param>
   <param name='key'>
    <reference idref='java-string'/>
   </param>
   <param name='arguments'>
    <array>
     <reference idref='java-object'/>
    </array>
   </param>
   <param name='severity'>
    <primitive type='short'/>
   </param>
   <throws>
    <reference idref='sax-exception'/>
   </throws>
  </method>
  
  <method name='reportError'>
   <param name='location'>
    <reference idref='sax-locator'/>
   </param>
   <param name='domain'>
    <reference idref='java-string'/>
   </param>
   <param name='key'>
    <reference idref='java-string'/>
   </param>
   <param name='arguments'>
    <array>
     <reference idref='java-object'/>
    </array>
   </param>
   <param name='severity'>
    <primitive type='short'/>
   </param>
   <throws>
    <reference idref='sax-exception'/>
   </throws>
  </method>
  
 </class>

 <class id='document-scanner' name='XMLDocumentScanner'>
 
  <implements>
   <reference idref='configurable'/>
  </implements>
  
  <implements>
   <reference idref='document-source'/>
  </implements>
  
  <implements>
   <reference idref='entity-handler'/>
  </implements>
  
  <field name='fSymbolTable'>
   <note>This field is initialized on reset.</note>
   <reference idref='symbol-table'/>
  </field>
  
  <field name='fErrorReporter'>
   <note>This field is initialized on reset.</note>
   <reference idref='error-reporter'/>
  </field>
  
  <field name='fEntityManager'>
   <note>This field is initialized on reset.</note>
   <reference idref='entity-manager'/>
  </field>
  
  <field name='fDTDScanner'>
   <note>This field is initialized on reset.</note>
   <reference idref='dtd-scanner'/>
  </field>
  
  <field name='fNamespaces'>
   <note>This field is initialized on reset.</note>
   <primitive type='boolean'/>
  </field>
  
  <field name='fDocumentHandler'>
   <reference idref='document-handler'/>
  </field>
  
  <constructor/>
  
  <method name='scanDocument'>
   <param name='complete'>
    <primitive type='boolean'/>
   </param>
   <returns>
    <primitive type='boolean'/>
   </returns>
   <throws>
    <reference idref='java-io-exception'/>
   </throws>
   <throws>
    <reference idref='sax-exception'/>
   </throws>
  </method>
  
 </class>

 <class id='dtd-scanner' name='XMLDTDScanner'>
 
  <implements>
   <reference idref='configurable'/>
  </implements>
  
  <implements>
   <reference idref='dtd-source'/>
  </implements>
  
  <implements>
   <reference idref='dtd-content-model-source'/>
  </implements>
  
  <implements>
   <reference idref='entity-handler'/>
  </implements>
  
  <field name='fSymbolTable'>
   <note>This field is initialized on reset.</note>
   <reference idref='symbol-table'/>
  </field>
  
  <field name='fErrorReporter'>
   <note>This field is initialized on reset.</note>
   <reference idref='error-reporter'/>
  </field>
  
  <field name='fEntityManager'>
   <note>This field is initialized on reset.</note>
   <reference idref='entity-manager'/>
  </field>
  
  <field name='fDTDHandler'>
   <reference idref='dtd-handler'/>
  </field>
  
  <field name='fDTDContentModelHandler'>
   <reference idref='dtd-content-model-handler'/>
  </field>
  
  <constructor/>
  
  <method name='scanDTD'>
   <param name='complete'>
    <primitive type='boolean'/>
   </param>
   <returns>
    <primitive type='boolean'/>
   </returns>
   <throws>
    <reference idref='java-io-exception'/>
   </throws>
   <throws>
    <reference idref='sax-exception'/>
   </throws>
  </method>
  
  <method name='scanDTDFragment'>
   <param name='complete'>
    <primitive type='boolean'/>
   </param>
   <returns>
    <primitive type='boolean'/>
   </returns>
   <throws>
    <reference idref='java-io-exception'/>
   </throws>
   <throws>
    <reference idref='sax-exception'/>
   </throws>
  </method>
  
  <method name='scanDTDInternalSubset'>
   <param name='complete'>
    <primitive type='boolean'/>
   </param>
   <param name='standalone'>
    <primitive type='boolean'/>
   </param>
   <param name='hasExternalDTD'>
    <primitive type='boolean'/>
   </param>
   <returns>
    <primitive type='boolean'/>
   </returns>
   <throws>
    <reference idref='java-io-exception'/>
   </throws>
   <throws>
    <reference idref='sax-exception'/>
   </throws>
  </method>
  
 </class>

 <class id='entity-manager' name='XMLEntityManager'>
 
  <implements>
   <reference idref='configurable'/>
  </implements>
  
  <field name='fEntityResolver'>
   <reference idref='sax-entity-resolver'/>
  </field>
  
  <field name='fEntityReader'>
   <reference idref='entity-reader'/>
  </field>
  
  <field name='fEntityHandler'>
   <reference idref='entity-handler'/>
  </field>
  
  <constructor/>
  
  <method name='setEntityHandler'>
   <param name='entityHandler'>
    <reference idref='entity-handler'/>
   </param>
  </method>
  
  <method name='addExternalEntity'>
   <param name='name'>
    <reference idref='java-string'/>
   </param>
   <param name='publicId'>
    <reference idref='java-string'/>
   </param>
   <param name='systemId'>
    <reference idref='java-string'/>
   </param>
   <param name='baseSystemId'>
    <reference idref='java-string'/>
   </param>
  </method>
  
  <method name='addInternalEntity'>
   <param name='name'>
    <reference idref='java-string'/>
   </param>
   <param name='text'>
    <reference idref='java-string'/>
   </param>
  </method>

  <method name='addUnparsedEntity'>
   <param name='name'>
    <reference idref='java-string'/>
   </param>
   <param name='publicId'>
    <reference idref='java-string'/>
   </param>
   <param name='systemId'>
    <reference idref='java-string'/>
   </param>
   <param name='notation'>
    <reference idref='java-string'/>
   </param>
  </method>
  
  <method name='isDeclaredEntity'>
   <param name='name'>
    <reference idref='java-string'/>
   </param>
   <returns>
    <primitive type='boolean'/>
   </returns>
  </method>

  <method name='isExternalEntity'>
   <param name='name'>
    <reference idref='java-string'/>
   </param>
   <returns>
    <primitive type='boolean'/>
   </returns>
  </method>

  <method name='isUnparsedEntity'>
   <param name='name'>
    <reference idref='java-string'/>
   </param>
   <returns>
    <primitive type='boolean'/>
   </returns>
  </method>

  <method name='setStandalone'>
   <param name='standalone'>
    <primitive type='boolean'/>
   </param>
  </method>
  
  <method name='isStandalone'>
   <returns>
    <primitive type='boolean'/>
   </returns>
  </method>

  <method name='expandSystemId'>
   <param name='systemId'>
    <reference idref='java-string'/>
   </param>
   <returns>
    <reference idref='java-string'/>
   </returns>
  </method>

  <method name='expandSystemId'>
   <param name='systemId'>
    <reference idref='java-string'/>
   </param>
   <param name='baseSystemId'>
    <reference idref='java-string'/>
   </param>
   <returns>
    <reference idref='java-string'/>
   </returns>
  </method>

  <method name='resolveEntity'>
   <param name='publicId'>
    <reference idref='java-string'/>
   </param>
   <param name='systemId'>
    <reference idref='java-string'/>
   </param>
   <param name='baseSystemId'>
    <reference idref='java-string'/>
   </param>
   <returns>
    <reference idref='input-source'/>
   </returns>
   <throws>
    <reference idref='java-io-exception'/>
   </throws>
   <throws>
    <reference idref='sax-exception'/>
   </throws>
  </method>
  
  <method name='startDocumentEntity'>
   <param name='inputSource'>
    <reference idref='input-source'/>
   </param>
  </method>
  
  <method name='startDTDEntity'>
   <param name='inputSource'>
    <reference idref='input-source'/>
   </param>
  </method>
  
  <method name='startEntity'>
   <param name='name'>
    <reference idref='java-string'/>
   </param>
   <param name='inputSource'>
    <reference idref='input-source'/>
   </param>
  </method>

  <method name='getEntityScanner'>
   <returns>
    <reference idref='entity-reader'/>
   </returns>
  </method>
  
 </class>

 <interface id='entity-handler' name='XMLEntityHandler'>
 
  <method name='startEntity'>
   <param name='name'>
    <note>
     The document has the pseudo-name of "[xml]", the DTD has the
     pseudo-name of "[dtd]; parameter entity names start with '%';
     and general entities are just specified by their name.
    </note>
    <reference idref='java-string'/>
   </param>
   <param name='publicId'>
    <reference idref='java-string'/>
   </param>
   <param name='systemId'>
    <reference idref='java-string'/>
   </param>
   <param name='baseSystemId'>
    <reference idref='java-string'/>
   </param>
   <param name='encoding'>
    <note>
     The auto-detected encoding of the entity or null if not appropriate. 
     The encoding name will be specified using the IANA encoding name.
    </note>
    <reference idref='java-string'/>
   </param>
   <throws>
    <reference idref='sax-exception'/>
   </throws>
  </method>
  
  <method name='endEntity'>
   <param name='name'>
    <reference idref='java-string'/>
   </param>
   <throws>
    <reference idref='sax-exception'/>
   </throws>
  </method>
  
 </interface>

 <class id='input-source' name='XMLInputSource'>
 
  <extends>
   <reference idref='sax-input-source'/>
  </extends>
  
  <constructor/>
  
  <constructor>
   <param name='inputSource'>
    <reference idref='sax-input-source'/>
   </param>
  </constructor>

  <constructor>
   <param name='inputStream'>
    <reference idref='java-io-input-stream'/>
   </param>
  </constructor>

  <constructor>
   <param name='reader'>
    <reference idref='java-io-reader'/>
   </param>
  </constructor>

  <constructor>
   <param name='systemId'>
    <reference idref='java-string'/>
   </param>
  </constructor>

  <method name='setBaseSystemId'>
   <param name='baseSystemId'>
    <reference idref='java-string'/>
   </param>
  </method>

  <method name='getBaseSystemId'>
   <returns>
    <reference idref='java-string'/>
   </returns>
  </method>

  <method name='setExpandedSystemId'>
   <param name='expandedSystemId'>
    <reference idref='java-string'/>
   </param>
  </method>

  <method name='getExpandedSystemId'>
   <returns>
    <reference idref='java-string'/>
   </returns>
  </method>

 </class>

 <class id='entity-reader' name='XMLEntityScanner'>
 
  <implements>
   <reference idref='sax-locator'/>
  </implements>

  <method name='getBaseSystemId'>
   <returns>
    <reference idref='java-string'/>
   </returns>
  </method>
  <method name='setEncoding'>
   <param name='encoding'>
    <reference idref='java-string'/>
   </param>
  </method>
  
  <method name='isExternal'>
   <returns>
    <primitive type='boolean'/>
   </returns>
  </method>
  
  <method name='peekChar'>
   <returns>
    <primitive type='int'/>
   </returns>
   <throws>
    <reference idref='java-io-exception'/>
   </throws>
   <throws>
    <reference idref='sax-exception'/>
   </throws>
  </method>
  
  <method name='scanChar'>
   <returns>
    <primitive type='int'/>
   </returns>
   <throws>
    <reference idref='java-io-exception'/>
   </throws>
   <throws>
    <reference idref='sax-exception'/>
   </throws>
  </method>
  
  <method name='scanNmtoken'>
   <returns>
    <reference idref='java-string'/>
   </returns>
   <throws>
    <reference idref='java-io-exception'/>
   </throws>
   <throws>
    <reference idref='sax-exception'/>
   </throws>
  </method>
  
  <method name='scanName'>
   <returns>
    <reference idref='java-string'/>
   </returns>
   <throws>
    <reference idref='java-io-exception'/>
   </throws>
   <throws>
    <reference idref='sax-exception'/>
   </throws>
  </method>
  
  <method name='scanQName'>
   <param name='qname'>
    <reference idref='qname'/>
   </param>
   <returns>
    <note>True if QName was scanned.</note>
    <primitive type='boolean'/>
   </returns>
   <throws>
    <reference idref='java-io-exception'/>
   </throws>
   <throws>
    <reference idref='sax-exception'/>
   </throws>
  </method>
  
  <method name='scanContent'>
   <note>Scans parsed content in an XML document.</note>
   <param name='content'>
    <reference idref='string'/>
   </param>
   <returns>
    <note>The next character on the stream.</note>
    <primitive type='int'/>
   </returns>
   <throws>
    <reference idref='java-io-exception'/>
   </throws>
   <throws>
    <reference idref='sax-exception'/>
   </throws>
  </method>
  
  <method name='scanLiteral'>
   <note>Scans attribute content.</note>
   <param name='quote'>
    <primitive type='int'/>
   </param>
   <param name='content'>
    <reference idref='string'/>
   </param>
   <returns>
    <note>The next character on the stream.</note>
    <primitive type='int'/>
   </returns>
   <throws>
    <reference idref='java-io-exception'/>
   </throws>
   <throws>
    <reference idref='sax-exception'/>
   </throws>
  </method>
  
  <method name='scanData'>
   <param name='delimiter'>
    <reference idref='java-string'/>
   </param>
   <param name='data'>
    <reference idref='string'/>
   </param>
   <returns>
    <note>True if there is more data to scan.</note>
    <primitive type='boolean'/>
   </returns>
   <throws>
    <reference idref='java-io-exception'/>
   </throws>
   <throws>
    <reference idref='sax-exception'/>
   </throws>
  </method>
  
  <method name='skipChar'>
   <param name='c'>
    <primitive type='int'/>
   </param>
   <returns>
    <note>True if the char was skipped.</note>
    <primitive type='boolean'/>
   </returns>
   <throws>
    <reference idref='java-io-exception'/>
   </throws>
   <throws>
    <reference idref='sax-exception'/>
   </throws>
  </method>
  
  <method name='skipSpaces'>
   <returns>
    <note>True if spaces were skipped.</note>
    <primitive type='boolean'/>
   </returns>
   <throws>
    <reference idref='java-io-exception'/>
   </throws>
   <throws>
    <reference idref='sax-exception'/>
   </throws>
  </method>
  
  <method name='skipString'>
   <param name='s'>
    <note>The string to skip.</note>
    <reference idref='java-string'/>
   </param>
   <returns>
    <note>True if string was skipped.</note>
    <primitive type='boolean'/>
   </returns>
   <throws>
    <reference idref='java-io-exception'/>
   </throws>
   <throws>
    <reference idref='sax-exception'/>
   </throws>
  </method>
  
 </class>

 <class id='validator' name='XMLValidator'>
 
  <implements>
   <reference idref='configurable'/>
  </implements>
  
  <implements>
   <reference idref='document-filter'/>
  </implements>
  
  <field name='fSymbolTable'>
   <note>This field is initialized on reset.</note>
   <reference idref='symbol-table'/>
  </field>
  
  <field name='fErrorReporter'>
   <note>This field is initialized on reset.</note>
   <reference idref='error-reporter'/>
  </field>
  
  <field name='fGrammarPool'>
   <note>This field is initialized on reset.</note>
   <reference idref='grammar-pool'/>
  </field>
  
  <field name='fNamespaces'>
   <note>This field is initialized on reset.</note>
   <primitive type='boolean'/>
  </field>
  
  <field name='fValidation'>
   <note>This field is initialized on reset.</note>
   <primitive type='boolean'/>
  </field>
  
  <field name='fDynamicValidation'>
   <note>This field is initialized on reset.</note>
   <primitive type='boolean'/>
  </field>
  
  <field name='fDocumentHandler'>
   <reference idref='document-handler'/>
  </field>
  
  <constructor/>
  
 </class>

</category>
